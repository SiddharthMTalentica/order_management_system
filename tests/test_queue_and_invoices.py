from fastapi.testclient import TestClient
from app.main import app
import uuid
import os
import time


def test_invoice_generated_after_shipping():
	client = TestClient(app)
	order_number = f"ORD-{uuid.uuid4().hex[:8]}"
	payload = {
		"order_number": order_number,
		"customer_id": "cust-queue",
		"currency": "INR",
		"items": [
			{"sku": "QSKU-1", "title": "QItem 1", "quantity": 1, "unit_price_minor": 1500},
		],
	}
	r = client.post("/orders", json=payload)
	assert r.status_code == 201, r.text
	order_id = r.json()["id"]

	assert client.post(f"/orders/{order_id}/pay", json={}).status_code == 200
	assert client.post(f"/orders/{order_id}/processing", json={}).status_code == 200
	assert client.post(f"/orders/{order_id}/ship", json={}).status_code == 200

	invoice_dir = os.getenv("INVOICE_OUTPUT_DIR", "/data/invoices")
	pdf_path = os.path.join(invoice_dir, f"invoice_{order_number}.pdf")

	# Poll up to 30s for the PDF to be generated by the worker (allowing for broker/worker delays)
	deadline = time.time() + 30
	while time.time() < deadline:
		if os.path.exists(pdf_path):
			break
		time.sleep(0.5)

	assert os.path.exists(pdf_path), f"Invoice not generated at {pdf_path}"
